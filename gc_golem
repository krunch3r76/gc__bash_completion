# golem
# tag: main 2021-10-01T00:18:43+00:00
# golem completion engine
# author: krunch3r76 (https://github.com/krunch3r76)
# license: poetic/GPL 3
#
# install to $HOME/.local/share/bash-completion/completions/golem

YAGNA_COMPLETION_ENGINE=$(yagna complete bash 2>&1 | head -n-1 )	# store the completion engine script produced by yagna
complete -r -o bashdefault -o default -F _yagna yagna 2>/dev/null	# clear before reload of yagna official script
source /dev/stdin <<<$YAGNA_COMPLETION_ENGINE 				# add yagna official completion engine
subcommands=(golemsp yagna run stop settings	set show) 		# golemsp subcommands manually added



# INPUT: gc__cwords {global}, COMP_LINE {imported env}
# OUTPUT: produce output of the command line proceeded with -h
# POST: N/A
_gc__context_help() {
	# DOCSTRING: gets corresponding output of command on the line from postfixing -h for help
	echo -e "\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
	$COMP_LINE -h
	echo -n "${PS1@P}${gc__cwords[@]}"
}





# INPUT: options {global}, last entered subcommand, second to last entered subcommand
# OUTPUT: none
# POST: COMPREPLY {global} set with possible completions
_gc__completion_golemsp() {
	# DOCSTRING: tab complete current word for command name golemsp
	local ULTIMATE=$1
	local PENULTIMATE=$2
	if [[ "$ULTIMATE" == "golemsp" ]]; then
		options=(run stop settings status help)
	elif [[ "$ULTIMATE" == "run" ]]; then
		options=(--subnet --account --payment-network --log-dir --debug)
	elif [[ "$ULTIMATE" == "settings" ]]; then
		options=(set show)
	elif [[ "$ULTIMATE" == "set" && $PENULTIMATE == "settings" ]]; then
		options=(--node-name --cores --memory --disk --starting-fee --env-per-hour --cpu-per-hour --acount --payment-network)
	fi
	COMPREPLY=($(compgen -W "${options[*]}" \"${COMP_WORDS[$COMP_CWORD]}\")) # generate and use possible expansions in options from the word under the cursor
}





# INPUT: gc__cwords {global}
# OUTPUT: space delimited tuple of size 1 or 2 containing ULTIMATE and if found PENULTIMATE
# POST: none
_gc__completion__rfind_subcommands() {
	# DOCSTRING: reverse find first and optionally second subcommand in the gc__cwords on the command line before cword
	
	local RINDEX
	# reverse move index to next subcommand, then store in ULTIMATE
	for (( RINDEX=$(( COMP_CWORD - 1 )); RINDEX > -1; RINDEX-- )); do
		if [[ "${subcommands[*]}" =~ (^| )${gc__cwords[$RINDEX]}($| ) ]]; then
			local ULTIMATE=${gc__cwords[$RINDEX]}
			break # on first subcommand seen
		fi
	done

	# reverse move index to next subcommand if preset, then store in PENULTIMATE
	for (( RINDEX=$(( RINDEX - 1 )); RINDEX > -1; RINDEX-- )); do
		if [[ "${subcommands[*]}" =~ (^| )${gc__cwords[$RINDEX]}($| ) ]]; then
			local PENULTIMATE=${gc__cwords[$RINDEX]}
			break # break on first subcommand seen
		fi
	done

	echo $ULTIMATE ${PENULTIMATE:+$PENULTIMATE}
}






# IN: none
# OUT: none
# PRE: none
# POST: $COMPREPLY set with possible expansions of word under cursor as per yagna's engine
_gc__completion_yagna() {
	# DOCSTRING: tab complete current word for yagna
	_yagna # build COMPREPLY with the Golem official imported completions
	# can inspect COMPREPLY and replace with the set difference from COMP_WORDS
	# to eliminate duplicates on the command line (so e.g. a flag already set is not suggested again)
}








# IN: complete's builtin exported variables
# OUT: none
# PRE: none
# POST: display updated with completion suggestions or contextual help for command as entered
_gc__completion() { 
	# DOCSTRING: handle golemsp, yagna specific logic
	# notes: ULTIMATE refers to the last occurring subcommand, PENULTIMATE is the preceding subcommand/command if present
	gc__cwords=("${COMP_WORDS[@]}") # global copy of the list of words in the current command line
	unset options # clear options in case sourced into current session previously
	local ULTIMATE PENULTIMATE
	if [[ ! $2 ]]; then # cursor over empty space so provide context help
		_gc__context_help
	else # cursor in word, so provide possible completions
		local ULTIMATES=$(_gc__completion__rfind_subcommands)
		local ULTIMATE=${ULTIMATES[0]}

		if [[ ${#ULTIMATES[*]} > 1 ]]; then PENULTIMATE=${ULTIMATES[1]}; fi
		if [[ "$1" == "golemsp" ]]; then
			_gc__completion_golemsp $ULTIMATE ${PENULTIMATE:+$PENULTIMATE}
		elif [[ "$1" == "yagna" ]]; then
			_gc__completion_yagna
		fi
	fi
} && 
complete -F _gc__completion golemsp yagna -D _gc__context_help


